// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: sale_service.proto

package sale_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SaleServiceClient is the client API for SaleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaleServiceClient interface {
	Create(ctx context.Context, in *SaleCreateReq, opts ...grpc.CallOption) (*SaleCreateResp, error)
	GetList(ctx context.Context, in *SaleGetListReq, opts ...grpc.CallOption) (*SaleGetListResp, error)
	GetById(ctx context.Context, in *SaleIdReq, opts ...grpc.CallOption) (*Sale, error)
	Update(ctx context.Context, in *SaleUpdateReq, opts ...grpc.CallOption) (*SaleUpdateResp, error)
	Delete(ctx context.Context, in *SaleIdReq, opts ...grpc.CallOption) (*SaleDeleteResp, error)
}

type saleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSaleServiceClient(cc grpc.ClientConnInterface) SaleServiceClient {
	return &saleServiceClient{cc}
}

func (c *saleServiceClient) Create(ctx context.Context, in *SaleCreateReq, opts ...grpc.CallOption) (*SaleCreateResp, error) {
	out := new(SaleCreateResp)
	err := c.cc.Invoke(ctx, "/sale_service.SaleService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) GetList(ctx context.Context, in *SaleGetListReq, opts ...grpc.CallOption) (*SaleGetListResp, error) {
	out := new(SaleGetListResp)
	err := c.cc.Invoke(ctx, "/sale_service.SaleService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) GetById(ctx context.Context, in *SaleIdReq, opts ...grpc.CallOption) (*Sale, error) {
	out := new(Sale)
	err := c.cc.Invoke(ctx, "/sale_service.SaleService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) Update(ctx context.Context, in *SaleUpdateReq, opts ...grpc.CallOption) (*SaleUpdateResp, error) {
	out := new(SaleUpdateResp)
	err := c.cc.Invoke(ctx, "/sale_service.SaleService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) Delete(ctx context.Context, in *SaleIdReq, opts ...grpc.CallOption) (*SaleDeleteResp, error) {
	out := new(SaleDeleteResp)
	err := c.cc.Invoke(ctx, "/sale_service.SaleService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaleServiceServer is the server API for SaleService service.
// All implementations should embed UnimplementedSaleServiceServer
// for forward compatibility
type SaleServiceServer interface {
	Create(context.Context, *SaleCreateReq) (*SaleCreateResp, error)
	GetList(context.Context, *SaleGetListReq) (*SaleGetListResp, error)
	GetById(context.Context, *SaleIdReq) (*Sale, error)
	Update(context.Context, *SaleUpdateReq) (*SaleUpdateResp, error)
	Delete(context.Context, *SaleIdReq) (*SaleDeleteResp, error)
}

// UnimplementedSaleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSaleServiceServer struct {
}

func (UnimplementedSaleServiceServer) Create(context.Context, *SaleCreateReq) (*SaleCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSaleServiceServer) GetList(context.Context, *SaleGetListReq) (*SaleGetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedSaleServiceServer) GetById(context.Context, *SaleIdReq) (*Sale, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedSaleServiceServer) Update(context.Context, *SaleUpdateReq) (*SaleUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSaleServiceServer) Delete(context.Context, *SaleIdReq) (*SaleDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeSaleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaleServiceServer will
// result in compilation errors.
type UnsafeSaleServiceServer interface {
	mustEmbedUnimplementedSaleServiceServer()
}

func RegisterSaleServiceServer(s grpc.ServiceRegistrar, srv SaleServiceServer) {
	s.RegisterService(&SaleService_ServiceDesc, srv)
}

func _SaleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.SaleService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).Create(ctx, req.(*SaleCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleGetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.SaleService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).GetList(ctx, req.(*SaleGetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.SaleService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).GetById(ctx, req.(*SaleIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.SaleService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).Update(ctx, req.(*SaleUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.SaleService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).Delete(ctx, req.(*SaleIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SaleService_ServiceDesc is the grpc.ServiceDesc for SaleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SaleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sale_service.SaleService",
	HandlerType: (*SaleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SaleService_Create_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _SaleService_GetList_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _SaleService_GetById_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SaleService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SaleService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sale_service.proto",
}
