// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: branch_product_service.proto

package branch_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BranchProductServiceClient is the client API for BranchProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BranchProductServiceClient interface {
	Create(ctx context.Context, in *BranchProductCreateReq, opts ...grpc.CallOption) (*BranchProductCreateResp, error)
	GetList(ctx context.Context, in *BranchProductGetListReq, opts ...grpc.CallOption) (*BranchProductGetListResp, error)
	GetById(ctx context.Context, in *BranchProductIdReq, opts ...grpc.CallOption) (*BranchProduct, error)
	Update(ctx context.Context, in *BranchProductUpdateReq, opts ...grpc.CallOption) (*BranchProductUpdateResp, error)
	Delete(ctx context.Context, in *BranchProductIdReq, opts ...grpc.CallOption) (*BranchProductDeleteResp, error)
}

type branchProductServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBranchProductServiceClient(cc grpc.ClientConnInterface) BranchProductServiceClient {
	return &branchProductServiceClient{cc}
}

func (c *branchProductServiceClient) Create(ctx context.Context, in *BranchProductCreateReq, opts ...grpc.CallOption) (*BranchProductCreateResp, error) {
	out := new(BranchProductCreateResp)
	err := c.cc.Invoke(ctx, "/branch_service.BranchProductService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchProductServiceClient) GetList(ctx context.Context, in *BranchProductGetListReq, opts ...grpc.CallOption) (*BranchProductGetListResp, error) {
	out := new(BranchProductGetListResp)
	err := c.cc.Invoke(ctx, "/branch_service.BranchProductService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchProductServiceClient) GetById(ctx context.Context, in *BranchProductIdReq, opts ...grpc.CallOption) (*BranchProduct, error) {
	out := new(BranchProduct)
	err := c.cc.Invoke(ctx, "/branch_service.BranchProductService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchProductServiceClient) Update(ctx context.Context, in *BranchProductUpdateReq, opts ...grpc.CallOption) (*BranchProductUpdateResp, error) {
	out := new(BranchProductUpdateResp)
	err := c.cc.Invoke(ctx, "/branch_service.BranchProductService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchProductServiceClient) Delete(ctx context.Context, in *BranchProductIdReq, opts ...grpc.CallOption) (*BranchProductDeleteResp, error) {
	out := new(BranchProductDeleteResp)
	err := c.cc.Invoke(ctx, "/branch_service.BranchProductService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BranchProductServiceServer is the server API for BranchProductService service.
// All implementations must embed UnimplementedBranchProductServiceServer
// for forward compatibility
type BranchProductServiceServer interface {
	Create(context.Context, *BranchProductCreateReq) (*BranchProductCreateResp, error)
	GetList(context.Context, *BranchProductGetListReq) (*BranchProductGetListResp, error)
	GetById(context.Context, *BranchProductIdReq) (*BranchProduct, error)
	Update(context.Context, *BranchProductUpdateReq) (*BranchProductUpdateResp, error)
	Delete(context.Context, *BranchProductIdReq) (*BranchProductDeleteResp, error)
	mustEmbedUnimplementedBranchProductServiceServer()
}

// UnimplementedBranchProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBranchProductServiceServer struct {
}

func (UnimplementedBranchProductServiceServer) Create(context.Context, *BranchProductCreateReq) (*BranchProductCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBranchProductServiceServer) GetList(context.Context, *BranchProductGetListReq) (*BranchProductGetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedBranchProductServiceServer) GetById(context.Context, *BranchProductIdReq) (*BranchProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedBranchProductServiceServer) Update(context.Context, *BranchProductUpdateReq) (*BranchProductUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBranchProductServiceServer) Delete(context.Context, *BranchProductIdReq) (*BranchProductDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBranchProductServiceServer) mustEmbedUnimplementedBranchProductServiceServer() {}

// UnsafeBranchProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BranchProductServiceServer will
// result in compilation errors.
type UnsafeBranchProductServiceServer interface {
	mustEmbedUnimplementedBranchProductServiceServer()
}

func RegisterBranchProductServiceServer(s grpc.ServiceRegistrar, srv BranchProductServiceServer) {
	s.RegisterService(&BranchProductService_ServiceDesc, srv)
}

func _BranchProductService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchProductCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchProductServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branch_service.BranchProductService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchProductServiceServer).Create(ctx, req.(*BranchProductCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchProductService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchProductGetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchProductServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branch_service.BranchProductService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchProductServiceServer).GetList(ctx, req.(*BranchProductGetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchProductService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchProductIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchProductServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branch_service.BranchProductService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchProductServiceServer).GetById(ctx, req.(*BranchProductIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchProductService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchProductUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchProductServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branch_service.BranchProductService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchProductServiceServer).Update(ctx, req.(*BranchProductUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchProductService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchProductIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchProductServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/branch_service.BranchProductService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchProductServiceServer).Delete(ctx, req.(*BranchProductIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BranchProductService_ServiceDesc is the grpc.ServiceDesc for BranchProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BranchProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "branch_service.BranchProductService",
	HandlerType: (*BranchProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BranchProductService_Create_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _BranchProductService_GetList_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _BranchProductService_GetById_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BranchProductService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BranchProductService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "branch_product_service.proto",
}
