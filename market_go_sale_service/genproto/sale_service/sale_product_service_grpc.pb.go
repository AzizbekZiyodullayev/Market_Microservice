// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: sale_product_service.proto

package sale_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SaleProductServiceClient is the client API for SaleProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaleProductServiceClient interface {
	Create(ctx context.Context, in *SaleProductCreateReq, opts ...grpc.CallOption) (*SaleProductCreateResp, error)
	GetList(ctx context.Context, in *SaleProductGetListReq, opts ...grpc.CallOption) (*SaleProductGetListResp, error)
	GetById(ctx context.Context, in *SaleProductIdReq, opts ...grpc.CallOption) (*SaleProduct, error)
	Update(ctx context.Context, in *SaleProductUpdateReq, opts ...grpc.CallOption) (*SaleProductUpdateResp, error)
	Delete(ctx context.Context, in *SaleProductIdReq, opts ...grpc.CallOption) (*SaleProductDeleteResp, error)
}

type saleProductServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSaleProductServiceClient(cc grpc.ClientConnInterface) SaleProductServiceClient {
	return &saleProductServiceClient{cc}
}

func (c *saleProductServiceClient) Create(ctx context.Context, in *SaleProductCreateReq, opts ...grpc.CallOption) (*SaleProductCreateResp, error) {
	out := new(SaleProductCreateResp)
	err := c.cc.Invoke(ctx, "/sale_service.SaleProductService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleProductServiceClient) GetList(ctx context.Context, in *SaleProductGetListReq, opts ...grpc.CallOption) (*SaleProductGetListResp, error) {
	out := new(SaleProductGetListResp)
	err := c.cc.Invoke(ctx, "/sale_service.SaleProductService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleProductServiceClient) GetById(ctx context.Context, in *SaleProductIdReq, opts ...grpc.CallOption) (*SaleProduct, error) {
	out := new(SaleProduct)
	err := c.cc.Invoke(ctx, "/sale_service.SaleProductService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleProductServiceClient) Update(ctx context.Context, in *SaleProductUpdateReq, opts ...grpc.CallOption) (*SaleProductUpdateResp, error) {
	out := new(SaleProductUpdateResp)
	err := c.cc.Invoke(ctx, "/sale_service.SaleProductService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleProductServiceClient) Delete(ctx context.Context, in *SaleProductIdReq, opts ...grpc.CallOption) (*SaleProductDeleteResp, error) {
	out := new(SaleProductDeleteResp)
	err := c.cc.Invoke(ctx, "/sale_service.SaleProductService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaleProductServiceServer is the server API for SaleProductService service.
// All implementations should embed UnimplementedSaleProductServiceServer
// for forward compatibility
type SaleProductServiceServer interface {
	Create(context.Context, *SaleProductCreateReq) (*SaleProductCreateResp, error)
	GetList(context.Context, *SaleProductGetListReq) (*SaleProductGetListResp, error)
	GetById(context.Context, *SaleProductIdReq) (*SaleProduct, error)
	Update(context.Context, *SaleProductUpdateReq) (*SaleProductUpdateResp, error)
	Delete(context.Context, *SaleProductIdReq) (*SaleProductDeleteResp, error)
}

// UnimplementedSaleProductServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSaleProductServiceServer struct {
}

func (UnimplementedSaleProductServiceServer) Create(context.Context, *SaleProductCreateReq) (*SaleProductCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSaleProductServiceServer) GetList(context.Context, *SaleProductGetListReq) (*SaleProductGetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedSaleProductServiceServer) GetById(context.Context, *SaleProductIdReq) (*SaleProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedSaleProductServiceServer) Update(context.Context, *SaleProductUpdateReq) (*SaleProductUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSaleProductServiceServer) Delete(context.Context, *SaleProductIdReq) (*SaleProductDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeSaleProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaleProductServiceServer will
// result in compilation errors.
type UnsafeSaleProductServiceServer interface {
	mustEmbedUnimplementedSaleProductServiceServer()
}

func RegisterSaleProductServiceServer(s grpc.ServiceRegistrar, srv SaleProductServiceServer) {
	s.RegisterService(&SaleProductService_ServiceDesc, srv)
}

func _SaleProductService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleProductCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleProductServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.SaleProductService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleProductServiceServer).Create(ctx, req.(*SaleProductCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleProductService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleProductGetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleProductServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.SaleProductService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleProductServiceServer).GetList(ctx, req.(*SaleProductGetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleProductService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleProductIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleProductServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.SaleProductService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleProductServiceServer).GetById(ctx, req.(*SaleProductIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleProductService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleProductUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleProductServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.SaleProductService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleProductServiceServer).Update(ctx, req.(*SaleProductUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleProductService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleProductIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleProductServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.SaleProductService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleProductServiceServer).Delete(ctx, req.(*SaleProductIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SaleProductService_ServiceDesc is the grpc.ServiceDesc for SaleProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SaleProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sale_service.SaleProductService",
	HandlerType: (*SaleProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SaleProductService_Create_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _SaleProductService_GetList_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _SaleProductService_GetById_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SaleProductService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SaleProductService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sale_product_service.proto",
}
